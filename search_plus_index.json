{"./":{"url":"./","title":"介绍","keywords":"","body":"AntDen是一个调度平台，可以方便的管理资源和重定义调度算法。它由下面几个组件组成 执行器： 负责任务的启动、停止、状态查看等。默认有两个执行器 exec用于执行命令，docker用于调用docker容器 客户端： 每个要被接入集群的机器都需要安装运行客户端。客户端负责调用执行器 控制器： 控制器负责和客户端的通信 调度器： 负责调度控制 看板： 控制台看板和API 命令行： 通过命令行提交查看任务 只需要简单的几步就可以部署AntDen服务，试试吧！！！快速开始 AntDen 做了什么？ 他现实了一个调度平台，从任务的提交到调度到最后的任务执行。 但是把三个模块抽象出来方便用户很方便的重新定义。 调度算法， antden中可以方便的重新定义和替换你调度算法。 每个调度算法是一个可以单独执行的二进制，通过标准输入和输出通过Json进行数据交互。 同时antden中提供了模拟器来对用户编写的调度算法进行打分。 执行器, antden 负责调度配置的抽象，把用户提交的左右的配置最终调度到服务器上后， 需要一个指定的执行器进行解析并且执行，antden中默认放置了exec和docker的执行器， 分别用户执行服务器命令和运行docker。 定一个执行器需要5个插件，告诉antden改任务是怎么 启动，停止，状态查看，任务退出状态回收，任务配置格式检查 数据集管理： antden中内置了一个默认的数据集，是由rsyncd提供的服务。但是提供了一个很简易的 方式接入其他数据集管理平台。 （除此之外，antden只提供最原始的html格式的控制台，用户需要自己定义对接优美的前端。 同时antden的系统状态，资源使用情况，任务资源使用情况，通过json日志格式进行了输出， 默认使用elk进行了对接。） Copyright 2020 - 2020. all right reserved，powered by Gitbook该文件修订时间： 2020-07-26 20:58:35 "},"quick_start/centos7.html":{"url":"quick_start/centos7.html","title":"极速安装(centos7)","keywords":"","body":"极速安装(系统：centos 7) 一键安装 curl -L get.antden.cn|sudo bash #只启动antden服务 curl -L get.antden.cn|elk=1 sudo bash #启动antden和elk 安装路径为当前路径下的AntDen 通过页面访问服务 http://ip:3000 默认管理员用户： 用户名 antden 密码 changeme 添加机器到集群中 根据settings中的步骤配置本地客户端 使用客户端 访问elk服务 http://ip:5601 默认用户： 用户名 antden 密码 changeme 在Management/Kibana/Index patterns 中添加 index: antden-* 在Management/Kibana/Saved Objects 中导入 AntDen/docker/docker-elk/antden-dashboard.ndjson 看板 Copyright 2020 - 2020. all right reserved，powered by Gitbook该文件修订时间： 2020-07-26 20:17:47 "},"quick_start/":{"url":"quick_start/","title":"快速开始(通用)","keywords":"","body":"快速安装 安装前提 安装了docker docker版本不能太低 下载AntDen代码 git clone https://github.com/data-o/AntDen 服务是在容器中运行的，下载代码时使用的用户最好是和容器服务是同一个用户，否则可能会出现文件权限的问题。 启动服务 cd AntDen ./control srv up -d 服务启动过程需要下载镜像和依赖，根据不同的网络情况，可能需要几分钟的时间。 通过页面访问服务 http://ip:3000 默认管理员用户： 用户名 antden 密码 changeme 添加机器到集群中 根据settings中的步骤配置本地客户端 使用客户端 启动elk服务(可选) cd AntDen ./control elk up -d http://ip:5601 默认用户： 用户名 antden 密码 changeme 在Management/Kibana/Saved Objects 中导入 AntDen/docker/docker-elk/antden-dashboard.ndjson 看板 Copyright 2020 - 2020. all right reserved，powered by Gitbook该文件修订时间： 2020-07-24 10:06:00 "},"quick_start/SSO.html":{"url":"quick_start/SSO.html","title":"登录接入(可选)","keywords":"","body":"登录接入（可选） 为什么要登录接入 AntDen默认会开启自己的用户登录功能，但是在生产环境中，公司内部会有单点登录系统（SSO）。 对接SSO后可以用统一的登录来进入AntDen。 对接步骤 重写 AntDen/dashboard/sso 和 AntDen/dashboard/ssoconfig 两个插件。 重写的插件可以不要覆盖默认的插件，可以放到新路径： AntDen/dashboard/private/code/sso 和 AntDen/dashboard/private/code/ssoconfig 。 系统判断有私有插件会首选使用私有插件。 ssoconfig 插件 #!# perl: code/ssoconfig use strict; use warnings; return sub { return +{ ssocallback => 'http://sso.antden.cn/login?callback=', cookiekey => 'u', ssologout => 'http://sso.antden.cn/logout', chpasswd => 'http://sso.antden.cn/chpasswd', } }; chpasswd 为修改密码的连接，可以为空，为空时用户在antden上点击修改密码会提示不支持 ssologout 为登出的连接,未定义情况下默认是清理key为cookiekey的cookie ssocallback(必要) 访问antden判断到用户没有登录时跳转的地址，antdne当前访问的地址会带在callback之后 登录成功后sso系统需要跳转回来 cookiekey(必要) SSO系统使用的cookie的名称，这个cookie的值会给另一个插件进行验证 sso 插件 #!# perl: code/sso use strict; use warnings; return sub { my $cookie = shift @_; # #通过$cookie 这个值去sso系统查询这个cookie的用户身份，获取用户的唯一标识， #如邮箱地址，用户名 （不要使用中文） # #如 获取到邮箱地址 $email # return $email; }; 例： 对接（聚云立方：https://console.marshotspot.com/） #!# perl: code/ssoconfig use strict; use warnings; return sub { return +{ ssocallback => 'https://console.marshotspot.com/account/login?redirect=', cookiekey => 'token', } }; #!# perl: code/sso use strict; use warnings; use Mojo::JWT; return sub { my $claims = eval{ Mojo::JWT->new(secret => 'sercet123456' )->decode(shift); }; return $@ ? undef : $claims->{email}; }; }; Copyright 2020 - 2020. all right reserved，powered by Gitbook该文件修订时间： 2020-07-26 20:00:02 "},"quick_start/framework.html":{"url":"quick_start/framework.html","title":"架构图","keywords":"","body":"架构图 总架构 客户端 控制器 调度器 Copyright 2020 - 2020. all right reserved，powered by Gitbook该文件修订时间： 2020-07-26 21:50:42 "}}